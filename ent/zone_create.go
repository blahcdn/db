// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/blahcdn/db/ent/user"
	"github.com/blahcdn/db/ent/zone"
)

// ZoneCreate is the builder for creating a Zone entity.
type ZoneCreate struct {
	config
	mutation *ZoneMutation
	hooks    []Hook
}

// SetDomain sets the "domain" field.
func (zc *ZoneCreate) SetDomain(s string) *ZoneCreate {
	zc.mutation.SetDomain(s)
	return zc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (zc *ZoneCreate) SetOwnerID(id int) *ZoneCreate {
	zc.mutation.SetOwnerID(id)
	return zc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (zc *ZoneCreate) SetNillableOwnerID(id *int) *ZoneCreate {
	if id != nil {
		zc = zc.SetOwnerID(*id)
	}
	return zc
}

// SetOwner sets the "owner" edge to the User entity.
func (zc *ZoneCreate) SetOwner(u *User) *ZoneCreate {
	return zc.SetOwnerID(u.ID)
}

// Mutation returns the ZoneMutation object of the builder.
func (zc *ZoneCreate) Mutation() *ZoneMutation {
	return zc.mutation
}

// Save creates the Zone in the database.
func (zc *ZoneCreate) Save(ctx context.Context) (*Zone, error) {
	var (
		err  error
		node *Zone
	)
	if len(zc.hooks) == 0 {
		if err = zc.check(); err != nil {
			return nil, err
		}
		node, err = zc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ZoneMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = zc.check(); err != nil {
				return nil, err
			}
			zc.mutation = mutation
			node, err = zc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(zc.hooks) - 1; i >= 0; i-- {
			mut = zc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, zc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (zc *ZoneCreate) SaveX(ctx context.Context) *Zone {
	v, err := zc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (zc *ZoneCreate) check() error {
	if _, ok := zc.mutation.Domain(); !ok {
		return &ValidationError{Name: "domain", err: errors.New("ent: missing required field \"domain\"")}
	}
	return nil
}

func (zc *ZoneCreate) sqlSave(ctx context.Context) (*Zone, error) {
	_node, _spec := zc.createSpec()
	if err := sqlgraph.CreateNode(ctx, zc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (zc *ZoneCreate) createSpec() (*Zone, *sqlgraph.CreateSpec) {
	var (
		_node = &Zone{config: zc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: zone.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: zone.FieldID,
			},
		}
	)
	if value, ok := zc.mutation.Domain(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: zone.FieldDomain,
		})
		_node.Domain = value
	}
	if nodes := zc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   zone.OwnerTable,
			Columns: []string{zone.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_zones = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ZoneCreateBulk is the builder for creating many Zone entities in bulk.
type ZoneCreateBulk struct {
	config
	builders []*ZoneCreate
}

// Save creates the Zone entities in the database.
func (zcb *ZoneCreateBulk) Save(ctx context.Context) ([]*Zone, error) {
	specs := make([]*sqlgraph.CreateSpec, len(zcb.builders))
	nodes := make([]*Zone, len(zcb.builders))
	mutators := make([]Mutator, len(zcb.builders))
	for i := range zcb.builders {
		func(i int, root context.Context) {
			builder := zcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ZoneMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, zcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, zcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, zcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (zcb *ZoneCreateBulk) SaveX(ctx context.Context) []*Zone {
	v, err := zcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
